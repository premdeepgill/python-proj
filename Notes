A library is simply a collection of resources and pre-written codes that we can use when we write our programs.

Variables are names given to data that we need to store and manipulate in our programs.

Variable names are case sensitive.

Basic operators in Python include +, -, *, /, //, % and ** which represent addition, subtraction, multiplication, division, floor division, modulus, and exponent respectively.

Besides the = operator, there are a few more assignment operators in Python. These include operators like +=, -= and *=.

Integers are numbers with no decimal parts, such as -5, -4, 0, 5, 8, etc.

Float refers to numbers that have decimal parts, such as 1.234, -0.021, 13.93.

String refers to text.

A Function is a block of reusable code that performs a certain task.

Type Casting is conversion of one data type to another, such as from an integer to a string. There are three build-in functions - int(), float(), str().

List refers to a collection of data which are normally related. Instead of storing these data as separate varirables, we can store them as a list. eg userAge [21, 22, 23, 24, 25] - Individual values are accessible by their indexes, and indexes always start from zero. When using Slice Notation [2:4], the item at the start index is always Included, but the item at the end is always Excluded.

To add items, use the append() function.

To remove items, use del listName[index].

Tuples are just like lists, but you cannot modify their values. The initial values are the values that will stay for the rest of the program. Use parentheses () to declare, multiple values are separated by a comma.

Dictionary is a collection of related data pairs (key-value). dictName = {dictionary key : data}. We can also declare a dictionary using the dict() method.

There are 3 logical operators - AND, OR, NOT. The AND operator returns True if all conditions are met. The OR operator returns True if at least one condition is met. The NOT operator returns True if the condition after the NOT keyword is false.

The FOR loop executes a block of code repeatedly until the condition in the statement is no longer valid.

To loop through a sequence of numbers, the built-in range() function is handy - range(start, end, step). If start is not given, the numbers generated will start from zero. The end value MUST be provided, however, the given end value is never part of the generated list.

A WHILE loop repeatedly executes instructions inside the loop while a certain condition remains valid. Often, we need to first declare a variable to function as a loop counter.

When working with loops, sometimes you may want to exit the loop when a certain condition is met. This is achieved with the BREAK keyword.

When we use CONTINUE, the rest of the loop after the keyword is skipped for that iteration.

The TRY/EXCEPT statement controls how the program proceeds when an error occurs.

ValueError and ZeroDivisionError are two of the many pre-defined error types in Python. ValueError is raised when a build-in operation or function receives an argument that has the right type but an inappropriate value. ZeroDivisionError is raised when the program tries to divide by zero. Other common errors in Python:
    * IOError: Raised when an I/O operation fails for an I/O-related reason, e.g., "file not found"
    * ImportError: Raised when an import statement fails to find the module definition
    * IndexError: Raised when a sequence (e.g. string, list, tuple) index is out of range
    * KeyError: Raised when a dictionary key is not found
    * NameError: Raised when a local or global name is not found
    * TypeError: Raised when an operation or function is applied to an object of inappropriate type

Functions are simply pre-written codes that perform a certain task. Depending on how the function is written, whether it is part of a class and how you import it, we can call a function simply by typing the name or by using the dot notation. Some functions require arguments and we pass them to the function by enclosing their values in parentheses() separated by commas.

There are two keywords to define a function: DEF and RETURN. def tells the program that the indented code from the next line onwards is part of the function. return is the keyword used to return an answer from the function. There can be more than one return statements, however, once the function executes a return statement, the function will exist.

Any variable declared inside a function is only accessible within the function. These are known as Local Variables. Any variable declared outside a function is known as a Global Variable and is accessible anywhere in the program. If a local variable shares the same name as a global variable, any code inside the function is accessing the local variable while outside code is accessing global variable. All parameters with default values MUST be placed at the end of the parameter list.

Python comes with a large number of built-in functions that are saved in files known as modules. To use the built-in codes in Python modules, we first have to import them into our programs using IMPORT keyword.

To create a custom module for reuse, simply save the file with a .py extension and put it in the same folder as the Python file that you are going to import it from.

sys.path refers to Python's system path. This is the list of directories that Python goes through to search for modules and files.

Every time the readline() function is called, it reads a new line from the file. The FOR loop is a more elegant and efficient way to read text files. We can also use read() function which allows us to specify the buffer size.

Simply stated, object-oriented programming is an approach to programming that breaks a programming problem into objects that interact with each other. Objects are created from templates known as classes. A class consists of variables and functions. If a function exists within a class, it is more commonly referred to as a method.

__init__ is a special method known as the initializer of the class. It is always named init with two underscores in front and at the back. An initializer is called whenever an object of the class is created.

Instance variables are prefixed with a "self" keyword. Writing an initializer is optional if you do not wish to initialize the instance variables when you create the object. It can be initialized later.

In order to use the class, we have to create an object from it. This is known as instantiating an object. An object is also known as an instance.